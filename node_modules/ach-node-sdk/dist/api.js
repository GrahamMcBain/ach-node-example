"use strict";
// tslint:disable
/**
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var OffsetAccountTypeEnum;
(function (OffsetAccountTypeEnum) {
    OffsetAccountTypeEnum["Checking"] = "checking";
    OffsetAccountTypeEnum["Savings"] = "savings";
})(OffsetAccountTypeEnum = exports.OffsetAccountTypeEnum || (exports.OffsetAccountTypeEnum = {}));
/**
 * ACHFilesApi - axios parameter creator
 * @export
 */
exports.ACHFilesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Append a Batch record to the specified file
         * @summary Add Batch to File
         * @param {string} fileID File ID
         * @param {Batch} batch
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBatchToFile: async (fileID, batch, xRequestID, xIdempotencyKey, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling addBatchToFile.');
            }
            // verify required parameter 'batch' is not null or undefined
            if (batch === null || batch === undefined) {
                throw new base_1.RequiredError('batch', 'Required parameter batch was null or undefined when calling addBatchToFile.');
            }
            const localVarPath = `/files/{fileID}/batches`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['X-Idempotency-Key'] = String(xIdempotencyKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof batch !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(batch !== undefined ? batch : {}) : (batch || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
         * @summary Validate file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFile: async (fileID, xRequestID, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling checkFile.');
            }
            const localVarPath = `/files/{fileID}/validate`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new File object from either the plaintext or JSON representation.
         * @summary Create File
         * @param {CreateFile} createFile Content of the ACH file (in json or raw text)
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile: async (createFile, xRequestID, xIdempotencyKey, options = {}) => {
            // verify required parameter 'createFile' is not null or undefined
            if (createFile === null || createFile === undefined) {
                throw new base_1.RequiredError('createFile', 'Required parameter createFile was null or undefined when calling createFile.');
            }
            const localVarPath = `/files/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['X-Idempotency-Key'] = String(xIdempotencyKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof createFile !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createFile !== undefined ? createFile : {}) : (createFile || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently deletes a File and associated Batches. It cannot be undone.
         * @summary Delete file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACHFile: async (fileID, xRequestID, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling deleteACHFile.');
            }
            const localVarPath = `/files/{fileID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Batch from a File
         * @summary Delete batch
         * @param {string} fileID File ID
         * @param {string} batchID Batch ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileBatch: async (fileID, batchID, xRequestID, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling deleteFileBatch.');
            }
            // verify required parameter 'batchID' is not null or undefined
            if (batchID === null || batchID === undefined) {
                throw new base_1.RequiredError('batchID', 'Required parameter batchID was null or undefined when calling deleteFileBatch.');
            }
            const localVarPath = `/files/{fileID}/batches/{batchID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)))
                .replace(`{${"batchID"}}`, encodeURIComponent(String(batchID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Consolidate batches and entries into the minimum number of batches needed.
         * @summary Flatten batches
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flattenFile: async (fileID, xRequestID, xIdempotencyKey, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling flattenFile.');
            }
            const localVarPath = `/files/{fileID}/flatten`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['X-Idempotency-Key'] = String(xIdempotencyKey);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific Batch on a File
         * @summary Get Batch
         * @param {string} fileID File ID
         * @param {string} batchID Batch ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileBatch: async (fileID, batchID, xRequestID, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling getFileBatch.');
            }
            // verify required parameter 'batchID' is not null or undefined
            if (batchID === null || batchID === undefined) {
                throw new base_1.RequiredError('batchID', 'Required parameter batchID was null or undefined when calling getFileBatch.');
            }
            const localVarPath = `/files/{fileID}/batches/{batchID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)))
                .replace(`{${"batchID"}}`, encodeURIComponent(String(batchID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the batches on a File.
         * @summary Get batches
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileBatches: async (fileID, xRequestID, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling getFileBatches.');
            }
            const localVarPath = `/files/{fileID}/batches`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of an existing File using the unique File identifier that was returned upon creation.
         * @summary Retrieve a file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileByID: async (fileID, xRequestID, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling getFileByID.');
            }
            const localVarPath = `/files/{fileID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assembles the existing file (batches and controls) records, computes sequence numbers and totals. Returns plaintext file.
         * @summary Get file contents
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileContents: async (fileID, xRequestID, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling getFileContents.');
            }
            const localVarPath = `/files/{fileID}/contents`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all ACH files created with the ACH service. These files are not persisted through multiple runs of the service.
         * @summary Get ACH files
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles: async (xRequestID, options = {}) => {
            const localVarPath = `/files`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check the ACH service to check if running
         * @summary Ping ACH service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping: async (options = {}) => {
            const localVarPath = `/ping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Split one file into two. One with only debits and one with only credits.
         * @summary Segment file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentFile: async (fileID, xRequestID, xIdempotencyKey, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling segmentFile.');
            }
            const localVarPath = `/files/{fileID}/segment`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['X-Idempotency-Key'] = String(xIdempotencyKey);
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
         * @summary Validate file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {ValidateOpts} [validateOpts]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFile: async (fileID, xRequestID, validateOpts, options = {}) => {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling validateFile.');
            }
            const localVarPath = `/files/{fileID}/validate`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof validateOpts !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(validateOpts !== undefined ? validateOpts : {}) : (validateOpts || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ACHFilesApi - functional programming interface
 * @export
 */
exports.ACHFilesApiFp = function (configuration) {
    return {
        /**
         * Append a Batch record to the specified file
         * @summary Add Batch to File
         * @param {string} fileID File ID
         * @param {Batch} batch
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBatchToFile(fileID, batch, xRequestID, xIdempotencyKey, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).addBatchToFile(fileID, batch, xRequestID, xIdempotencyKey, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
         * @summary Validate file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFile(fileID, xRequestID, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).checkFile(fileID, xRequestID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new File object from either the plaintext or JSON representation.
         * @summary Create File
         * @param {CreateFile} createFile Content of the ACH file (in json or raw text)
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFile(createFile, xRequestID, xIdempotencyKey, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).createFile(createFile, xRequestID, xIdempotencyKey, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Permanently deletes a File and associated Batches. It cannot be undone.
         * @summary Delete file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteACHFile(fileID, xRequestID, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).deleteACHFile(fileID, xRequestID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Batch from a File
         * @summary Delete batch
         * @param {string} fileID File ID
         * @param {string} batchID Batch ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileBatch(fileID, batchID, xRequestID, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).deleteFileBatch(fileID, batchID, xRequestID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Consolidate batches and entries into the minimum number of batches needed.
         * @summary Flatten batches
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flattenFile(fileID, xRequestID, xIdempotencyKey, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).flattenFile(fileID, xRequestID, xIdempotencyKey, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific Batch on a File
         * @summary Get Batch
         * @param {string} fileID File ID
         * @param {string} batchID Batch ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileBatch(fileID, batchID, xRequestID, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).getFileBatch(fileID, batchID, xRequestID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the batches on a File.
         * @summary Get batches
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileBatches(fileID, xRequestID, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).getFileBatches(fileID, xRequestID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the details of an existing File using the unique File identifier that was returned upon creation.
         * @summary Retrieve a file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileByID(fileID, xRequestID, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).getFileByID(fileID, xRequestID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Assembles the existing file (batches and controls) records, computes sequence numbers and totals. Returns plaintext file.
         * @summary Get file contents
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileContents(fileID, xRequestID, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).getFileContents(fileID, xRequestID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all ACH files created with the ACH service. These files are not persisted through multiple runs of the service.
         * @summary Get ACH files
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiles(xRequestID, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).getFiles(xRequestID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check the ACH service to check if running
         * @summary Ping ACH service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ping(options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).ping(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Split one file into two. One with only debits and one with only credits.
         * @summary Segment file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async segmentFile(fileID, xRequestID, xIdempotencyKey, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).segmentFile(fileID, xRequestID, xIdempotencyKey, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
         * @summary Validate file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {ValidateOpts} [validateOpts]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFile(fileID, xRequestID, validateOpts, options) {
            const localVarAxiosArgs = await exports.ACHFilesApiAxiosParamCreator(configuration).validateFile(fileID, xRequestID, validateOpts, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ACHFilesApi - factory interface
 * @export
 */
exports.ACHFilesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Append a Batch record to the specified file
         * @summary Add Batch to File
         * @param {string} fileID File ID
         * @param {Batch} batch
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBatchToFile(fileID, batch, xRequestID, xIdempotencyKey, options) {
            return exports.ACHFilesApiFp(configuration).addBatchToFile(fileID, batch, xRequestID, xIdempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
         * @summary Validate file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFile(fileID, xRequestID, options) {
            return exports.ACHFilesApiFp(configuration).checkFile(fileID, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new File object from either the plaintext or JSON representation.
         * @summary Create File
         * @param {CreateFile} createFile Content of the ACH file (in json or raw text)
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(createFile, xRequestID, xIdempotencyKey, options) {
            return exports.ACHFilesApiFp(configuration).createFile(createFile, xRequestID, xIdempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes a File and associated Batches. It cannot be undone.
         * @summary Delete file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACHFile(fileID, xRequestID, options) {
            return exports.ACHFilesApiFp(configuration).deleteACHFile(fileID, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Batch from a File
         * @summary Delete batch
         * @param {string} fileID File ID
         * @param {string} batchID Batch ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileBatch(fileID, batchID, xRequestID, options) {
            return exports.ACHFilesApiFp(configuration).deleteFileBatch(fileID, batchID, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * Consolidate batches and entries into the minimum number of batches needed.
         * @summary Flatten batches
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flattenFile(fileID, xRequestID, xIdempotencyKey, options) {
            return exports.ACHFilesApiFp(configuration).flattenFile(fileID, xRequestID, xIdempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific Batch on a File
         * @summary Get Batch
         * @param {string} fileID File ID
         * @param {string} batchID Batch ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileBatch(fileID, batchID, xRequestID, options) {
            return exports.ACHFilesApiFp(configuration).getFileBatch(fileID, batchID, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the batches on a File.
         * @summary Get batches
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileBatches(fileID, xRequestID, options) {
            return exports.ACHFilesApiFp(configuration).getFileBatches(fileID, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of an existing File using the unique File identifier that was returned upon creation.
         * @summary Retrieve a file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileByID(fileID, xRequestID, options) {
            return exports.ACHFilesApiFp(configuration).getFileByID(fileID, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * Assembles the existing file (batches and controls) records, computes sequence numbers and totals. Returns plaintext file.
         * @summary Get file contents
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileContents(fileID, xRequestID, options) {
            return exports.ACHFilesApiFp(configuration).getFileContents(fileID, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * List all ACH files created with the ACH service. These files are not persisted through multiple runs of the service.
         * @summary Get ACH files
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles(xRequestID, options) {
            return exports.ACHFilesApiFp(configuration).getFiles(xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * Check the ACH service to check if running
         * @summary Ping ACH service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options) {
            return exports.ACHFilesApiFp(configuration).ping(options).then((request) => request(axios, basePath));
        },
        /**
         * Split one file into two. One with only debits and one with only credits.
         * @summary Segment file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentFile(fileID, xRequestID, xIdempotencyKey, options) {
            return exports.ACHFilesApiFp(configuration).segmentFile(fileID, xRequestID, xIdempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
         * @summary Validate file
         * @param {string} fileID File ID
         * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
         * @param {ValidateOpts} [validateOpts]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFile(fileID, xRequestID, validateOpts, options) {
            return exports.ACHFilesApiFp(configuration).validateFile(fileID, xRequestID, validateOpts, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ACHFilesApi - object-oriented interface
 * @export
 * @class ACHFilesApi
 * @extends {BaseAPI}
 */
class ACHFilesApi extends base_1.BaseAPI {
    /**
     * Append a Batch record to the specified file
     * @summary Add Batch to File
     * @param {string} fileID File ID
     * @param {Batch} batch
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    addBatchToFile(fileID, batch, xRequestID, xIdempotencyKey, options) {
        return exports.ACHFilesApiFp(this.configuration).addBatchToFile(fileID, batch, xRequestID, xIdempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
     * @summary Validate file
     * @param {string} fileID File ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    checkFile(fileID, xRequestID, options) {
        return exports.ACHFilesApiFp(this.configuration).checkFile(fileID, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new File object from either the plaintext or JSON representation.
     * @summary Create File
     * @param {CreateFile} createFile Content of the ACH file (in json or raw text)
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    createFile(createFile, xRequestID, xIdempotencyKey, options) {
        return exports.ACHFilesApiFp(this.configuration).createFile(createFile, xRequestID, xIdempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently deletes a File and associated Batches. It cannot be undone.
     * @summary Delete file
     * @param {string} fileID File ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    deleteACHFile(fileID, xRequestID, options) {
        return exports.ACHFilesApiFp(this.configuration).deleteACHFile(fileID, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Batch from a File
     * @summary Delete batch
     * @param {string} fileID File ID
     * @param {string} batchID Batch ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    deleteFileBatch(fileID, batchID, xRequestID, options) {
        return exports.ACHFilesApiFp(this.configuration).deleteFileBatch(fileID, batchID, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Consolidate batches and entries into the minimum number of batches needed.
     * @summary Flatten batches
     * @param {string} fileID File ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    flattenFile(fileID, xRequestID, xIdempotencyKey, options) {
        return exports.ACHFilesApiFp(this.configuration).flattenFile(fileID, xRequestID, xIdempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific Batch on a File
     * @summary Get Batch
     * @param {string} fileID File ID
     * @param {string} batchID Batch ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    getFileBatch(fileID, batchID, xRequestID, options) {
        return exports.ACHFilesApiFp(this.configuration).getFileBatch(fileID, batchID, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the batches on a File.
     * @summary Get batches
     * @param {string} fileID File ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    getFileBatches(fileID, xRequestID, options) {
        return exports.ACHFilesApiFp(this.configuration).getFileBatches(fileID, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the details of an existing File using the unique File identifier that was returned upon creation.
     * @summary Retrieve a file
     * @param {string} fileID File ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    getFileByID(fileID, xRequestID, options) {
        return exports.ACHFilesApiFp(this.configuration).getFileByID(fileID, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Assembles the existing file (batches and controls) records, computes sequence numbers and totals. Returns plaintext file.
     * @summary Get file contents
     * @param {string} fileID File ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    getFileContents(fileID, xRequestID, options) {
        return exports.ACHFilesApiFp(this.configuration).getFileContents(fileID, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all ACH files created with the ACH service. These files are not persisted through multiple runs of the service.
     * @summary Get ACH files
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    getFiles(xRequestID, options) {
        return exports.ACHFilesApiFp(this.configuration).getFiles(xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check the ACH service to check if running
     * @summary Ping ACH service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    ping(options) {
        return exports.ACHFilesApiFp(this.configuration).ping(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Split one file into two. One with only debits and one with only credits.
     * @summary Segment file
     * @param {string} fileID File ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {string} [xIdempotencyKey] Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    segmentFile(fileID, xRequestID, xIdempotencyKey, options) {
        return exports.ACHFilesApiFp(this.configuration).segmentFile(fileID, xRequestID, xIdempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
     * @summary Validate file
     * @param {string} fileID File ID
     * @param {string} [xRequestID] Optional Request ID allows application developer to trace requests through the systems logs
     * @param {ValidateOpts} [validateOpts]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHFilesApi
     */
    validateFile(fileID, xRequestID, validateOpts, options) {
        return exports.ACHFilesApiFp(this.configuration).validateFile(fileID, xRequestID, validateOpts, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ACHFilesApi = ACHFilesApi;
